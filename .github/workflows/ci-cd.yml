# Agile CI/CD Pipeline with Six Sigma Quality Gates
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # Six Sigma: Define - Code Quality Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Backend Quality Checks
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Backend Lint Check
      run: |
        cd backend
        npm run lint

    - name: Backend Format Check
      run: |
        cd backend
        npm run format:check

    - name: Backend Security Audit
      run: |
        cd backend
        npm audit --audit-level moderate

    # Frontend Quality Checks
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend Lint Check
      run: |
        cd frontend
        npm run lint

    - name: Frontend Format Check
      run: |
        cd frontend
        npm run format:check

    - name: Frontend Security Audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    # Security Scanning
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

  # Six Sigma: Measure - Comprehensive Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: ${{ env.MONGODB_VERSION }}

    - name: Install Dependencies
      run: |
        cd backend
        npm ci

    - name: Run Unit Tests
      run: |
        cd backend
        npm run test:unit

    - name: Run Integration Tests
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test

    - name: Run Performance Tests
      run: |
        cd backend
        npm run test:performance

    - name: Generate Coverage Report
      run: |
        cd backend
        npm run test:coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Six Sigma: Analyze - Performance Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: ${{ env.MONGODB_VERSION }}

    - name: Install Dependencies
      run: |
        cd backend
        npm ci

    - name: Start Application
      run: |
        cd backend
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test

    - name: Run Load Tests
      run: |
        cd backend
        npm run load-test

    - name: Health Check
      run: |
        cd backend
        npm run health-check

  # Six Sigma: Improve - Build and Deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Build Frontend
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build

    # Build Backend (if needed)
    - name: Prepare Backend
      run: |
        cd backend
        npm ci --production

    # Docker Build
    - name: Build Docker Images
      run: |
        docker build -t nexttechfusiongadgets-backend ./backend
        docker build -t nexttechfusiongadgets-frontend ./frontend

    # Deploy to staging (example)
    - name: Deploy to Staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Seed categories for staging
        cd backend && npm run seed:categories

    # Deploy to production (example)
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  # Six Sigma: Control - Post-deployment Monitoring
  post-deployment:
    name: Post-deployment Checks
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Health Check - Production
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Check application health
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
        
        # Check API endpoints
        curl -f ${{ secrets.PRODUCTION_URL }}/api/status || exit 1

    - name: Run Smoke Tests
      run: |
        # Run basic smoke tests against production
        echo "Running smoke tests..."
        # Add your smoke test commands here

    - name: Performance Monitoring
      run: |
        # Check performance metrics
        echo "Checking performance metrics..."
        # Add performance monitoring checks here

    - name: Notify Team
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Deployment successful! All quality gates passed.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Team on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Deployment failed! Check the logs for details.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Lean: Continuous Monitoring
  monitoring:
    name: Continuous Monitoring
    runs-on: ubuntu-latest
    needs: post-deployment
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Setup Monitoring Alerts
      run: |
        echo "Setting up monitoring alerts..."
        # Configure monitoring and alerting
        
    - name: Performance Baseline
      run: |
        echo "Establishing performance baseline..."
        # Record performance metrics for comparison
        
    - name: Error Rate Monitoring
      run: |
        echo "Monitoring error rates..."
        # Set up error rate monitoring